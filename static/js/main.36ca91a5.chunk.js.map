{"version":3,"sources":["components/navbar.component.js","components/questionslist.component.js","components/add-question.component.js","components/maincomponent.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Component","QuestionList","props","handleOptionChange","e","value","setState","bind","handleFormSubmit","state","questions","preventDefault","console","log","this","axios","get","then","respose","data","catch","error","map","currentquestion","Form","onSubmit","Field","ques","Checkbox","label","options","name","checked","onChange","type","class","questionList","AddQuestion","onChangeques","onChangeques_type","onChangeans","onChangeoptions","ques_type","ans","target","split","question","post","res","window","location","required","selected","MainComponent","App","path","component","QuestionsList","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.36ca91a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n        <Link to=\"/\" className=\"navbar-brand\">Quiz App</Link>\n        <div className=\"collpase navbar-collapse\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"navbar-item\">\n          <Link to=\"/questionlist\" className=\"nav-link\">Questions List</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/add\" className=\"nav-link\">Add Questions</Link>\n          </li>          \n        </ul>\n        </div>\n      </nav>\n    );\n  }\n}","import React, { Component } from 'react';\nimport axios from 'axios'\nimport {Form,Checkbox} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\n\n\n\n\nexport default class QuestionList extends Component {\n    constructor(props){\n        super(props)\n        this.handleOptionChange = this.handleOptionChange.bind(this);\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n        this.state = {questions:[] }\n        \n    }\n    \n    handleOptionChange = (e, { value }) => this.setState({ value })\n\n    \n    \n    \n    handleFormSubmit (e) {\n      e.preventDefault();\n    console.log('You have selected:', this.state.value);\n      \n    }\n\n    \n  \n\n    componentDidMount(){\n        axios.get('https://megaquizappbackend.herokuapp.com/question/')\n        .then(respose =>{\n            this.setState({questions:respose.data})\n        })\n        .catch(error => {\n            console.log(error);\n        });\n        \n    };\n\n    \n\n    questionList() {\n\n        return this.state.questions.map(currentquestion => {\n\n          return(\n        <Form onSubmit={this.handleFormSubmit}>\n        <Form.Field>\n         <h3>Q.  {currentquestion.ques}</h3>\n        </Form.Field>\n        <Form.Field>\n          <Checkbox\n            label={currentquestion.options[0]}\n            name='checkboxRadioGroup'\n            value ={currentquestion.options[0]}\n            checked = {this.state.value === currentquestion.options[0]}\n            onChange={this.handleOptionChange}\n\n          />\n        </Form.Field>\n        <Form.Field>\n          <Checkbox\n            label={currentquestion.options[1]}\n            name='checkboxRadioGroup'\n            value ={currentquestion.options[1]}\n            checked = {this.state.value === currentquestion.options[1]}\n            onChange={this.handleOptionChange}\n\n          />\n        </Form.Field>\n        <Form.Field>\n          <Checkbox\n            label={currentquestion.options[2]}\n            name='checkboxRadioGroup'\n            value = {currentquestion.options[2]}\n            checked = {this.state.value === currentquestion.options[2]}\n            onChange={this.handleOptionChange}\n\n          />\n        </Form.Field>\n        <Form.Field>\n          <Checkbox\n            label={currentquestion.options[3]}\n            name='checkboxRadioGroup'\n            value={currentquestion.options[3]}\n            checked = {this.state.value ===currentquestion.options[3]}\n            onChange={this.handleOptionChange}\n\n          />\n        </Form.Field>\n        \n        <button type =\"submit\" class=\"ui button\" >Submit Answer</button>\n        <hr />\n\n      </Form>\n      \n          );\n        })\n      }\n\n\n\n  render() {\n    return (\n        <div>\n        <h2>Questions</h2>\n        <hr />\n        <hr />\n        <p>{ this.questionList() } </p>\n          \n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nexport default class AddQuestion extends Component {\n\n    constructor(props){\n        super(props);\n\n    this.onChangeques = this.onChangeques.bind(this);\n    this.onChangeques_type = this.onChangeques_type.bind(this);\n    this.onChangeans = this.onChangeans.bind(this);\n    this.onChangeoptions = this.onChangeoptions.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n\n\n        this.state = {\n            ques :'',\n            ques_type:'',\n            ans :'',\n            options: [],\n        }\n    }\n\n    onChangeques(e){\n        this.setState({\n            ques:e.target.value\n        });\n    }\n    onChangeques_type(e){\n        this.setState({\n            ques_type:e.target.value\n        });\n    }\n    onChangeans(e){\n        this.setState({\n            ans:e.target.value\n        });\n    }\n    onChangeoptions(e){\n        this.setState({\n            options:e.target.value.split(\",\")\n        });\n    }\n    onSubmit(e){\n        e.preventDefault();\n\n        const question = {\n            ques:this.state.ques,\n            ques_type:this.state.ques_type,\n            ans:this.state.ans,\n            options:this.state.options\n        }\n        console.log(question)\n\n        axios.post('https://megaquizappbackend.herokuapp.com/question/add',question)\n        .then(res =>console.log(res.data))\n\n        window.location = '/';\n    }\n\n  render() {\n    return (\n        <div>\n        <h3>Add New Question</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\"> \n            <label>Type the Question: </label>\n            <input type = \"text\"\n                required\n                className=\"form-control\"\n                value={this.state.ques}\n                onChange={this.onChangeques}>\n                \n            </input>\n          </div>\n          <div className=\"form-group\"> \n            <label>Type of Question: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.ques_type}\n                onChange={this.onChangeques_type}\n                />\n          </div>\n          <div className=\"form-group\">\n            <label>Correct Answer </label>\n            <input \n                type=\"text\" \n                className=\"form-control\"\n                value={this.state.ans}\n                onChange={this.onChangeans}\n                />\n          </div>\n          <div className=\"form-group\">\n            <label>Options </label>\n            <div>\n                <input\n                selected={this.state.options}\n                onChange={this.onChangeoptions}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <input type=\"submit\" value=\"Add Question\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class MainComponent extends Component {\n  render() {\n    return (\n      <div>\n        <p>Welcome to the quiz app</p>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from \"./components/navbar.component\"\nimport QuestionsList from \"./components/questionslist.component\";\nimport AddQuestion from \"./components/add-question.component\";\nimport MainComponent from \"./components/maincomponent\"\n\n\nfunction App() {\n  return (\n    <Router>\n      <div class=\"container\">\n    <Navbar />\n  <br/>\n  <Route path=\"/questionlist\" component={QuestionsList} />\n  <Route path=\"/add\" component={AddQuestion} />\n  <Route path = \"/\" exact component = {MainComponent} />\n    </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}